{"version":3,"file":"index.min.js","sources":["../src/version.ts","../src/auto-api.ts","../src/dto.ts","../src/heartbeat.ts","../src/reporter.ts"],"sourcesContent":["export const API_VERSION = '1.0.0';\n//# sourceMappingURL=version.js.map","import axios from 'axios';\nimport { API_VERSION } from './version.ts';\nimport Validator from 'validator';\nconst validator = Validator.default;\nexport class AutoApi {\n    options;\n    client;\n    callsInFlight;\n    /**\n     * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n     */\n    get getCallsInFlight() {\n        return this.callsInFlight;\n    }\n    constructor(options) {\n        this.options = options;\n        this.callsInFlight = 0;\n        _validateCtorParams(options);\n        this.client = _isAxiosInstance(options.clientConfig)\n            ? options.clientConfig\n            : axios.create({\n                baseURL: options.clientConfig.baseUrl,\n                timeout: 10000,\n                headers: {\n                    'X-Api-Key': options.clientConfig.apiKey,\n                    'Context-Type': 'application/json',\n                },\n                responseType: 'json',\n            });\n    }\n    async startTestRun(info) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.post('/api/v1.0/test-run/create', {\n                // Provided params\n                ...info,\n                // API Version\n                sdkVersion: `js:${API_VERSION}`,\n                // Copy over the product id\n                productId: this.options.productId,\n                // Copy over test rail parameters\n                testRailReportingEnabled: this.options.testRailOptions !== undefined,\n                addAllTestsToPlan: this.options.testRailOptions?.addAllTestsToPlan,\n                testRailProjectId: this.options.testRailOptions?.projectId,\n                testRailSuiteId: this.options.testRailOptions?.suiteId,\n                testRailPlanName: this.options.testRailOptions?.planName,\n                testRailRunName: this.options.testRailOptions?.runName,\n                overrideTestRailRunNameUniqueness: this.options.testRailOptions?.overrideTestRailRunUniqueness,\n            });\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async endTestRun(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.delete(`/api/v3.0/driver-session/${testRunId}?sessionStatus=COMPLETE`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async startTestCase(params) {\n        this.callsInFlight += 1;\n        try {\n            const res = await this.client.post('/api/v1.0/test-result/create-result', params);\n            return res;\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async submitTestCaseResult(params) {\n        this.callsInFlight += 1;\n        try {\n            await this.client.post('/api/v1.0/test-result', params);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async getProviderSessionLinks(resultIds) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            const validIds = resultIds.filter(id => id);\n            return await this.client.post('/api/v1.0/test-result/provider-info', validIds);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async sendSdkHeartbeat(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            return await this.client.post(`/api/v2.0/sdk-heartbeat?testRunId=${testRunId}`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n}\n/**\n *\n * @param clientConfig user defined type check to see if we were passed an already built AxoisIntance or regular ClientConfig\n */\nconst _isAxiosInstance = (clientConfig) => {\n    // we check for property \"request\" to see if client config object is an Axois instance or regular ClientConfig\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return clientConfig.request !== undefined;\n};\n/**\n * Exposed for testing. Don't use this!\n * @private\n *\n * @param params mirrored constructor args from AutoApi class\n */\nexport const _validateCtorParams = (...params) => {\n    // product ID sanity\n    if (!Number.isInteger(params[0].productId) || params[0].productId <= 0) {\n        throw new Error(`productId must be a positive integer, was: '${params[0].productId}'`);\n    }\n    // check for specific options if pre-built client wasn't passed\n    if (!_isAxiosInstance(params[0].clientConfig)) {\n        // Base URL sanity\n        if (!validator.isURL(params[0].clientConfig.baseUrl, {\n            protocols: ['http', 'https'],\n            require_tld: false,\n            require_host: true,\n            require_protocol: true,\n        })) {\n            throw new Error(`baseUrl is not valid HTTP/HTTPS URL, was: ${params[0].clientConfig.baseUrl}`);\n        }\n        // API Key sanity\n        if (validator.isEmpty(params[0].clientConfig.apiKey)) {\n            throw new Error('apiKey is an empty string!');\n        }\n    }\n};\n//# sourceMappingURL=auto-api.js.map","/**\n * Enum representing a test result's status\n */\nexport var TestResultStatus;\n(function (TestResultStatus) {\n    TestResultStatus[\"NOT_RUN\"] = \"NOT_RUN\";\n    TestResultStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    TestResultStatus[\"PASSED\"] = \"PASSED\";\n    TestResultStatus[\"FAILED\"] = \"FAILED\";\n    TestResultStatus[\"SKIPPED\"] = \"SKIPPED\";\n    TestResultStatus[\"CANCELED\"] = \"CANCELED\";\n    TestResultStatus[\"ERROR\"] = \"ERROR\";\n})(TestResultStatus || (TestResultStatus = {}));\n//# sourceMappingURL=dto.js.map","export class TestRunHeartbeatService {\n    testRunId;\n    autoApi;\n    enabled = false;\n    nextHeartbeat;\n    constructor(testRunId, autoApi) {\n        this.testRunId = testRunId;\n        this.autoApi = autoApi;\n    }\n    async start() {\n        // End the current heartbeat if it has started\n        await this.end();\n        // Set up va new interval\n        this.enabled = true;\n        this.scheduleNextHeartbeat();\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    scheduleNextHeartbeat() {\n        if (!this.enabled) {\n            return;\n        }\n        this.nextHeartbeat = new Promise(resolve => setTimeout(resolve, 5000)).then(() => this.sendHeartbeat());\n    }\n    async sendHeartbeat() {\n        console.log('Sending heartbeat');\n        await this.autoApi.sendSdkHeartbeat(this.testRunId);\n        console.log('Heartbeat sent');\n        this.scheduleNextHeartbeat();\n    }\n    async end() {\n        if (this.nextHeartbeat !== undefined) {\n            this.enabled = false;\n            console.debug('Ending Applause SDK Heartbeat');\n            await this.nextHeartbeat;\n            console.debug('Applause SDK Heartbeat Ended Successfully');\n        }\n        this.nextHeartbeat = undefined;\n    }\n}\n//# sourceMappingURL=heartbeat.js.map","import { writeFileSync } from 'fs';\nimport { AutoApi } from './auto-api.ts';\nimport { TestRunHeartbeatService } from './heartbeat.ts';\nimport { join as pathJoin } from 'path';\nexport class ApplauseReporter {\n    autoApi;\n    initializer;\n    reporter;\n    constructor(config) {\n        this.autoApi = new AutoApi(config);\n        this.initializer = new RunInitializer(this.autoApi);\n    }\n    runnerStart(tests) {\n        this.reporter = this.initializer.initializeRun(tests);\n    }\n    startTestCase(id, testCaseName, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot start a test case for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.startTestCase(id, testCaseName, params));\n    }\n    submitTestCaseResult(id, status, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot submit test case result for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.submitTestCaseResult(id, status, params));\n    }\n    async runnerEnd() {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot end a run that was never initialized');\n        }\n        await this.reporter.then(reporter => reporter.runnerEnd());\n    }\n}\nclass RunInitializer {\n    autoApi;\n    constructor(autoApi) {\n        this.autoApi = autoApi;\n    }\n    async initializeRun(tests) {\n        const testRunCreateResponse = await this.autoApi.startTestRun({\n            tests: tests || [],\n        });\n        if (testRunCreateResponse.status < 200 ||\n            testRunCreateResponse.status > 300) {\n            throw new Error('Unable to create test run');\n        }\n        const runId = testRunCreateResponse.data.runId;\n        console.log('Test Run %d initialized', runId);\n        const heartbeatService = new TestRunHeartbeatService(runId, this.autoApi);\n        await heartbeatService.start();\n        return new RunReporter(this.autoApi, runId, heartbeatService);\n    }\n}\nclass RunReporter {\n    autoApi;\n    testRunId;\n    heartbeatService;\n    TEST_RAIL_CASE_ID_PREFIX = 'TestRail-';\n    APPLAUSE_CASE_ID_PREFIX = 'Applause-';\n    uidToResultIdMap = {};\n    resultSubmissionMap = {};\n    constructor(autoApi, testRunId, heartbeatService) {\n        this.autoApi = autoApi;\n        this.testRunId = testRunId;\n        this.heartbeatService = heartbeatService;\n    }\n    startTestCase(id, testCaseName, params) {\n        const parsedTestCase = this.parseTestCaseName(testCaseName);\n        this.uidToResultIdMap[id] = this.autoApi\n            .startTestCase({\n            testCaseName: parsedTestCase.testCaseName,\n            testCaseId: parsedTestCase.testRailTestCaseId,\n            itwTestCaseId: parsedTestCase.applauseTestCaseId,\n            testRunId: this.testRunId,\n            // If the additional params provides either test case id, it will override the parsed value we set above\n            ...params,\n        })\n            .then(res => {\n            return res.data.testResultId;\n        });\n    }\n    submitTestCaseResult(id, status, params) {\n        this.resultSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId => this.autoApi.submitTestCaseResult({\n            status: status,\n            testResultId: resultId,\n            ...params,\n        }));\n    }\n    parseTestCaseName(testCaseName) {\n        // Split the name on spaces. We will reassemble after parsing out the other ids\n        const tokens = testCaseName.split(' ');\n        let testRailTestCaseId;\n        let applauseTestCaseId;\n        tokens.forEach(token => {\n            if (token?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)) {\n                if (testRailTestCaseId !== undefined) {\n                    console.warn('Multiple TestRail case ids detected in testCase name');\n                }\n                testRailTestCaseId = token.substring(this.TEST_RAIL_CASE_ID_PREFIX.length);\n            }\n            else if (token?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)) {\n                if (applauseTestCaseId !== undefined) {\n                    console.warn('Multiple Applause case ids detected in testCase name');\n                }\n                applauseTestCaseId = token.substring(this.APPLAUSE_CASE_ID_PREFIX.length);\n            }\n        });\n        return {\n            applauseTestCaseId,\n            testRailTestCaseId,\n            testCaseName: tokens\n                .filter(token => token !==\n                `${this.TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`)\n                .filter(token => token !==\n                `${this.APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`)\n                .join(' '),\n        };\n    }\n    async runnerEnd() {\n        // Wait for all results to be created\n        const resultIds = (await Promise.all(Object.values(this.uidToResultIdMap))) || [];\n        // Wait for the results to be submitted\n        void (await Promise.all(Object.values(this.resultSubmissionMap)));\n        // Wait the heartbeat to be ended\n        void (await this.heartbeatService.end());\n        void (await this.autoApi.endTestRun(this.testRunId));\n        // Fetch the provider session asset links and save them off to a file\n        const resp = await this.autoApi.getProviderSessionLinks(resultIds);\n        const jsonArray = resp.data || [];\n        if (jsonArray.length > 0) {\n            console.info(JSON.stringify(jsonArray));\n            // this is the wdio.conf outputDir\n            const outputPath = '.';\n            writeFileSync(pathJoin(outputPath, 'providerUrls.txt'), JSON.stringify(jsonArray, null, 1));\n        }\n    }\n}\n//# sourceMappingURL=reporter.js.map"],"names":["validator","Validator","default","AutoApi","options","client","callsInFlight","getCallsInFlight","this","constructor","_validateCtorParams","_isAxiosInstance","clientConfig","axios","create","baseURL","baseUrl","timeout","headers","apiKey","responseType","startTestRun","info","post","sdkVersion","productId","testRailReportingEnabled","undefined","testRailOptions","addAllTestsToPlan","testRailProjectId","projectId","testRailSuiteId","suiteId","testRailPlanName","planName","testRailRunName","runName","overrideTestRailRunNameUniqueness","overrideTestRailRunUniqueness","endTestRun","testRunId","delete","startTestCase","params","submitTestCaseResult","getProviderSessionLinks","resultIds","validIds","filter","id","sendSdkHeartbeat","request","Number","isInteger","Error","isURL","protocols","require_tld","require_host","require_protocol","isEmpty","TestResultStatus","exports","TestRunHeartbeatService","autoApi","enabled","nextHeartbeat","start","end","scheduleNextHeartbeat","isEnabled","Promise","resolve","setTimeout","then","sendHeartbeat","console","log","debug","RunInitializer","initializeRun","tests","testRunCreateResponse","status","runId","data","heartbeatService","RunReporter","TEST_RAIL_CASE_ID_PREFIX","APPLAUSE_CASE_ID_PREFIX","uidToResultIdMap","resultSubmissionMap","testCaseName","parsedTestCase","parseTestCaseName","testCaseId","testRailTestCaseId","itwTestCaseId","applauseTestCaseId","res","testResultId","resultId","tokens","split","forEach","token","startsWith","warn","substring","length","join","runnerEnd","all","Object","values","jsonArray","JSON","stringify","outputPath","writeFileSync","pathJoin","initializer","reporter","config","runnerStart"],"mappings":"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"}