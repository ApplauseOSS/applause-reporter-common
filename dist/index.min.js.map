{"version":3,"file":"index.min.js","sources":["../src/dto.ts","../src/index.ts"],"sourcesContent":["/**\n * DTO used to create a new Applause test run\n */\nexport interface TestRunCreateDto {\n  // Required: a list of test cases to pre-create\n  tests: string[];\n\n  // Optional: an applause test cycle id\n  itwTestCycleId?: number;\n}\n\n/**\n * DTO modeling the response to a test run creation request\n */\nexport interface TestRunCreateResponseDto {\n  // The ID of the Applause Test Run\n  runId: number;\n}\n\n/**\n * DTO used to mark the start of a test result\n */\nexport interface CreateTestResultDto {\n  // ID of the test run to submit this result to\n  testRunId: number;\n\n  // Name of the Test Case\n  testCaseName: string;\n\n  // A collection of provider session guids\n  providerSessionIds: string[];\n\n  // Optional: TestRail Test Case Id\n  testCaseId?: string;\n\n  // Optional: Applause Test Case Id\n  itwTestCaseId?: string;\n}\n\n/**\n * DTO response to a test result creation request\n */\nexport interface CreateTestResultResponseDto {\n  testResultId: number;\n}\n\n/**\n * DTO used to submit a status to an in progress test result.\n */\nexport interface SubmitTestResultDto {\n  // The id of the test result\n  testResultId: number;\n\n  // An optional testrail test case id\n  testRailCaseId?: number;\n\n  // An optional applause test case id\n  itwCaseId?: number;\n\n  // The ending status of the test.\n  status: TestResultStatus;\n\n  // An optional reason why the test failed.\n  failureReason?: string;\n}\n\n/**\n * Enum representing a test result's status\n */\nexport enum TestResultStatus {\n  NOT_RUN = 'NOT_RUN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  PASSED = 'PASSED',\n  FAILED = 'FAILED',\n  SKIPPED = 'SKIPPED',\n  CANCELED = 'CANCELED',\n  ERROR = 'ERROR',\n}\n\n/**\n * DTO representing test result info that is provided at the end of a test run\n */\nexport interface TestResultProviderInfo {\n  testResultId: number;\n  providerUrl: string;\n  providerSessionId: string;\n}\n\n/**\n * DTO representing TestRail settings. The presence of this info signals that test rail reporting is enabled\n */\nexport interface TestRailOptions {\n  projectId: number;\n  suiteId: number;\n  planName: string;\n  runName: string;\n  addAllTestsToPlan?: boolean;\n  overrideTestRailRunUniqueness?: boolean;\n}\n","import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  CreateTestResultDto,\n  CreateTestResultResponseDto,\n  SubmitTestResultDto,\n  TestRailOptions,\n  TestResultProviderInfo,\n  TestRunCreateDto,\n  TestRunCreateResponseDto,\n} from './dto';\nimport validator from 'validator';\nimport { API_VERSION } from './version';\n\nexport type ClientConfig = {\n  readonly baseUrl: string;\n  readonly apiKey: string;\n};\n\nexport class AutoApi {\n  private readonly client: AxiosInstance;\n\n  private callsInFlight: number;\n  /**\n   * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n   */\n  public get getCallsInFlight(): number {\n    return this.callsInFlight;\n  }\n\n  constructor(\n    readonly options: {\n      readonly clientConfig: ClientConfig | AxiosInstance;\n      readonly productId: number;\n      readonly testRailOptions?: TestRailOptions;\n    }\n  ) {\n    this.callsInFlight = 0;\n    _validateCtorParams(options);\n    this.client = _isAxiosInstance(options.clientConfig)\n      ? options.clientConfig\n      : axios.create({\n          baseURL: options.clientConfig.baseUrl,\n          timeout: 10000,\n          headers: {\n            'X-Api-Key': options.clientConfig.apiKey,\n            'Context-Type': 'application/json',\n          },\n          responseType: 'json',\n        });\n  }\n\n  async startTestRun(\n    info: TestRunCreateDto\n  ): Promise<AxiosResponse<TestRunCreateResponseDto>> {\n    this.callsInFlight += 1;\n    try {\n      return await this.client.post<TestRunCreateResponseDto>(\n        '/api/v1.0/test-run/create',\n        {\n          // Provided params\n          ...info,\n\n          // API Version\n          sdkVersion: `js:${API_VERSION}`,\n\n          // Copy over the product id\n          productId: this.options.productId,\n\n          // Copy over test rail parameters\n          testRailReportingEnabled: this.options.testRailOptions !== undefined,\n          addAllTestsToPlan: this.options.testRailOptions?.addAllTestsToPlan,\n          testRailProjectId: this.options.testRailOptions?.projectId,\n          testRailSuiteId: this.options.testRailOptions?.suiteId,\n          testRailPlanName: this.options.testRailOptions?.planName,\n          testRailRunName: this.options.testRailOptions?.runName,\n          overrideTestRailRunNameUniqueness:\n            this.options.testRailOptions?.overrideTestRailRunUniqueness,\n        }\n      );\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async endTestRun(testRunId: number): Promise<AxiosResponse<void>> {\n    this.callsInFlight += 1;\n    try {\n      return await this.client.delete<void>(\n        `/api/v3.0/driver-session/${testRunId}?sessionStatus=COMPLETE`\n      );\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async startTestCase(\n    params: CreateTestResultDto\n  ): Promise<AxiosResponse<CreateTestResultResponseDto>> {\n    this.callsInFlight += 1;\n    try {\n      const res = await this.client.post<CreateTestResultResponseDto>(\n        '/api/v1.0/test-result/create-result',\n        params\n      );\n      return res;\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async submitTestResult(params: SubmitTestResultDto): Promise<void> {\n    this.callsInFlight += 1;\n    try {\n      await this.client.post('/api/v1.0/test-result', params);\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async getProviderSessionLinks(\n    resultIds: number[]\n  ): Promise<AxiosResponse<TestResultProviderInfo[]>> {\n    this.callsInFlight += 1;\n    try {\n      // this filters out falsy values (null, undefined, 0)\n      const validIds: number[] = resultIds.filter(id => id);\n      return await this.client.post<TestResultProviderInfo[]>(\n        '/api/v1.0/test-result/provider-info',\n        validIds\n      );\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async sendSdkHeartbeat(\n    testRunId: number\n  ): Promise<AxiosResponse<TestResultProviderInfo[]>> {\n    this.callsInFlight += 1;\n    try {\n      // this filters out falsy values (null, undefined, 0)\n      return await this.client.post<TestResultProviderInfo[]>(\n        `/api/v2.0/sdk-heartbeat?testRunId=${testRunId}`\n      );\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n}\n\n/**\n *\n * @param clientConfig user defined type check to see if we were passed an already built AxoisIntance or regular ClientConfig\n */\nconst _isAxiosInstance = (\n  clientConfig: ClientConfig | AxiosInstance\n): clientConfig is AxiosInstance => {\n  // we check for property \"request\" to see if client config object is an Axois instance or regular ClientConfig\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return (clientConfig as AxiosInstance).request !== undefined;\n};\n\n/**\n * Exposed for testing. Don't use this!\n * @private\n *\n * @param params mirrored constructor args from AutoApi class\n */\nexport const _validateCtorParams = (\n  ...params: ConstructorParameters<typeof AutoApi>\n): void => {\n  // product ID sanity\n  if (!Number.isInteger(params[0].productId) || params[0].productId <= 0) {\n    throw new Error(\n      `productId must be a positive integer, was: '${params[0].productId}'`\n    );\n  }\n  // check for specific options if pre-built client wasn't passed\n  if (!_isAxiosInstance(params[0].clientConfig)) {\n    // Base URL sanity\n    if (\n      !validator.isURL(params[0].clientConfig.baseUrl, {\n        protocols: ['http', 'https'],\n        require_tld: false, // allow localhost\n        require_host: true,\n        require_protocol: true,\n      })\n    ) {\n      throw new Error(\n        `baseUrl is not valid HTTP/HTTPS URL, was: ${params[0].clientConfig.baseUrl}`\n      );\n    }\n    // API Key sanity\n    if (validator.isEmpty(params[0].clientConfig.apiKey)) {\n      throw new Error('apiKey is an empty string!');\n    }\n  }\n};\n\n// Re-export DTOs\nexport * from './dto';\n"],"names":["TestResultStatus","_isAxiosInstance","clientConfig","undefined","request","_validateCtorParams","params","Number","isInteger","productId","Error","validator","isURL","baseUrl","protocols","require_tld","require_host","require_protocol","isEmpty","apiKey","constructor","options","this","callsInFlight","client","axios","create","baseURL","timeout","headers","responseType","getCallsInFlight","async","info","post","sdkVersion","testRailReportingEnabled","testRailOptions","addAllTestsToPlan","testRailProjectId","projectId","testRailSuiteId","suiteId","testRailPlanName","planName","testRailRunName","runName","overrideTestRailRunNameUniqueness","overrideTestRailRunUniqueness","testRunId","delete","resultIds","validIds","filter","id"],"mappings":"+aAqEA,IAAYA,6BAAAA,EAAAA,qBAAAA,0CAEVA,4BACAA,kBACAA,kBACAA,oBACAA,sBACAA,gBC8EF,MAAMC,EACJC,QAImDC,IAA3CD,EAA+BE,QAS5BC,EAAsB,IAC9BC,KAGH,IAAKC,OAAOC,UAAUF,EAAO,GAAGG,YAAcH,EAAO,GAAGG,WAAa,EACnE,MAAM,IAAIC,MACR,+CAA+CJ,EAAO,GAAGG,cAI7D,IAAKR,EAAiBK,EAAO,GAAGJ,cAAe,CAE7C,IACGS,UAAUC,MAAMN,EAAO,GAAGJ,aAAaW,QAAS,CAC/CC,UAAW,CAAC,OAAQ,SACpBC,aAAa,EACbC,cAAc,EACdC,kBAAkB,IAGpB,MAAM,IAAIP,MACR,6CAA6CJ,EAAO,GAAGJ,aAAaW,WAIxE,GAAIF,UAAUO,QAAQZ,EAAO,GAAGJ,aAAaiB,QAC3C,MAAM,IAAIT,MAAM,gDArKpBU,YACWC,GAAAC,aAAAD,EAMTC,KAAKC,cAAgB,EACrBlB,EAAoBgB,GACpBC,KAAKE,OAASvB,EAAiBoB,EAAQnB,cACnCmB,EAAQnB,aACRuB,UAAMC,OAAO,CACXC,QAASN,EAAQnB,aAAaW,QAC9Be,QAAS,IACTC,QAAS,CACP,YAAaR,EAAQnB,aAAaiB,OAClC,eAAgB,oBAElBW,aAAc,SAtBXC,uBACT,OAAOT,KAAKC,cAyBdS,mBACEC,GAEAX,KAAKC,eAAiB,EACtB,IACE,aAAaD,KAAKE,OAAOU,KACvB,4BACA,IAEKD,EAGHE,WAAY,WAGZ1B,UAAWa,KAAKD,QAAQZ,UAGxB2B,8BAA2DjC,IAAjCmB,KAAKD,QAAQgB,gBACvCC,kBAAmBhB,KAAKD,QAAQgB,iBAAiBC,kBACjDC,kBAAmBjB,KAAKD,QAAQgB,iBAAiBG,UACjDC,gBAAiBnB,KAAKD,QAAQgB,iBAAiBK,QAC/CC,iBAAkBrB,KAAKD,QAAQgB,iBAAiBO,SAChDC,gBAAiBvB,KAAKD,QAAQgB,iBAAiBS,QAC/CC,kCACEzB,KAAKD,QAAQgB,iBAAiBW,wCAIpC1B,KAAKC,eAAiB,GAI1BS,iBAAiBiB,GACf3B,KAAKC,eAAiB,EACtB,IACE,aAAaD,KAAKE,OAAO0B,OACvB,4BAA4BD,oCAG9B3B,KAAKC,eAAiB,GAI1BS,oBACE1B,GAEAgB,KAAKC,eAAiB,EACtB,IAKE,aAJkBD,KAAKE,OAAOU,KAC5B,sCACA5B,WAIFgB,KAAKC,eAAiB,GAI1BS,uBAAuB1B,GACrBgB,KAAKC,eAAiB,EACtB,UACQD,KAAKE,OAAOU,KAAK,wBAAyB5B,WAEhDgB,KAAKC,eAAiB,GAI1BS,8BACEmB,GAEA7B,KAAKC,eAAiB,EACtB,IAEE,MAAM6B,EAAqBD,EAAUE,QAAOC,GAAMA,IAClD,aAAahC,KAAKE,OAAOU,KACvB,sCACAkB,WAGF9B,KAAKC,eAAiB,GAI1BS,uBACEiB,GAEA3B,KAAKC,eAAiB,EACtB,IAEE,aAAaD,KAAKE,OAAOU,KACvB,qCAAqCe,aAGvC3B,KAAKC,eAAiB"}