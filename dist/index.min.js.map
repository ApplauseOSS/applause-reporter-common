{"version":3,"file":"index.min.js","sources":["../src/version.ts","../src/config.ts","../src/auto-api.ts","../src/dto.ts","../src/heartbeat.ts","../src/reporter.ts"],"sourcesContent":["export const API_VERSION = '1.0.0';\n//# sourceMappingURL=version.js.map","import { existsSync, readFileSync } from 'fs';\nimport path from 'path';\nimport Validator from 'validator';\nconst validator = Validator.default;\nexport const DEFAULT_URL = 'https://prod-auto-api.cloud.applause.com/';\n// Loads the configuration\nexport function loadConfig(loadOptions) {\n    // Setup the initial config with any default properties\n    let config = {\n        baseUrl: DEFAULT_URL,\n    };\n    // Load properties from the provided config file\n    if (loadOptions !== undefined && loadOptions.configFile !== undefined) {\n        config = overrideConfig(config, loadConfigFromFile(path.join(process.cwd(), loadOptions.configFile)));\n    }\n    else {\n        // Override from the default config file\n        config = overrideConfig(config, loadConfigFromFile());\n    }\n    // Then load in the file override properties\n    if (loadOptions !== undefined && loadOptions.properties !== undefined) {\n        config = overrideConfig(config, loadOptions.properties);\n    }\n    if (!isComplete(config)) {\n        throw new Error('Config is not complete');\n    }\n    // We know that the config is complete, so we can cast\n    const finalConfig = config;\n    validateConfig(finalConfig);\n    return finalConfig;\n}\nexport function overrideConfig(config, overrides) {\n    return Object.assign({}, config, Object.fromEntries(Object.entries(overrides || {}).filter(([_, v]) => v !== undefined)));\n}\nexport function isComplete(config) {\n    return (config.baseUrl !== undefined &&\n        config.apiKey !== undefined &&\n        config.productId !== undefined);\n}\nexport function loadConfigFromFile(configFile) {\n    const configFilePath = configFile || process.cwd() + '/applause.json';\n    if (!existsSync(configFilePath)) {\n        return {};\n    }\n    const fileCotents = readFileSync(configFilePath, 'utf8');\n    return JSON.parse(fileCotents);\n}\nexport function validateConfig(config) {\n    if (!Number.isInteger(config.productId) || config.productId <= 0) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n    if (!validator.isURL(config.baseUrl, {\n        protocols: ['http', 'https'],\n        require_tld: false,\n        allow_query_components: false,\n        disallow_auth: true,\n        allow_fragments: false,\n        allow_protocol_relative_urls: false,\n        allow_trailing_dot: false,\n        require_host: true,\n        require_protocol: true,\n    })) {\n        throw new Error(`baseUrl is not valid HTTP/HTTPS URL, was: ${config.baseUrl}`);\n    }\n    if (validator.isEmpty(config.apiKey)) {\n        throw new Error('apiKey is an empty string!');\n    }\n}\nexport function validatePartialConfig(config) {\n    if (config.productId !== undefined &&\n        (!Number.isInteger(config.productId) || config.productId <= 0)) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n}\n//# sourceMappingURL=config.js.map","import axios from 'axios';\nimport { API_VERSION } from './version.ts';\nimport { validateConfig } from './config.ts';\nexport class AutoApi {\n    options;\n    client;\n    callsInFlight;\n    /**\n     * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n     */\n    get getCallsInFlight() {\n        return this.callsInFlight;\n    }\n    constructor(options) {\n        this.options = options;\n        this.callsInFlight = 0;\n        validateConfig(options);\n        this.client = axios.create({\n            baseURL: options.baseUrl,\n            timeout: 10000,\n            headers: {\n                'X-Api-Key': options.apiKey,\n                'Context-Type': 'application/json',\n            },\n            responseType: 'json',\n        });\n    }\n    async startTestRun(info) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.post('/api/v1.0/test-run/create', {\n                // Provided params\n                ...info,\n                // API Version\n                sdkVersion: `js:${API_VERSION}`,\n                // Copy over the product id\n                productId: this.options.productId,\n                // Copy over test rail parameters\n                testRailReportingEnabled: this.options.testRailOptions !== undefined,\n                addAllTestsToPlan: this.options.testRailOptions?.addAllTestsToPlan,\n                testRailProjectId: this.options.testRailOptions?.projectId,\n                testRailSuiteId: this.options.testRailOptions?.suiteId,\n                testRailPlanName: this.options.testRailOptions?.planName,\n                testRailRunName: this.options.testRailOptions?.runName,\n                overrideTestRailRunNameUniqueness: this.options.testRailOptions?.overrideTestRailRunUniqueness,\n            });\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async endTestRun(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.delete(`/api/v3.0/driver-session/${testRunId}?sessionStatus=COMPLETE`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async startTestCase(params) {\n        this.callsInFlight += 1;\n        try {\n            const res = await this.client.post('/api/v1.0/test-result/create-result', params);\n            return res;\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async submitTestCaseResult(params) {\n        this.callsInFlight += 1;\n        try {\n            await this.client.post('/api/v1.0/test-result', params);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async getProviderSessionLinks(resultIds) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            const validIds = resultIds.filter(id => id);\n            return await this.client.post('/api/v1.0/test-result/provider-info', validIds);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async sendSdkHeartbeat(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            return await this.client.post(`/api/v2.0/sdk-heartbeat?testRunId=${testRunId}`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n}\n//# sourceMappingURL=auto-api.js.map","/**\n * Enum representing a test result's status\n */\nexport var TestResultStatus;\n(function (TestResultStatus) {\n    TestResultStatus[\"NOT_RUN\"] = \"NOT_RUN\";\n    TestResultStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    TestResultStatus[\"PASSED\"] = \"PASSED\";\n    TestResultStatus[\"FAILED\"] = \"FAILED\";\n    TestResultStatus[\"SKIPPED\"] = \"SKIPPED\";\n    TestResultStatus[\"CANCELED\"] = \"CANCELED\";\n    TestResultStatus[\"ERROR\"] = \"ERROR\";\n})(TestResultStatus || (TestResultStatus = {}));\n//# sourceMappingURL=dto.js.map","export class TestRunHeartbeatService {\n    testRunId;\n    autoApi;\n    enabled = false;\n    nextHeartbeat;\n    constructor(testRunId, autoApi) {\n        this.testRunId = testRunId;\n        this.autoApi = autoApi;\n    }\n    async start() {\n        // End the current heartbeat if it has started\n        await this.end();\n        // Set up va new interval\n        this.enabled = true;\n        this.scheduleNextHeartbeat();\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    scheduleNextHeartbeat() {\n        if (!this.enabled) {\n            return;\n        }\n        this.nextHeartbeat = new Promise(resolve => setTimeout(resolve, 5000)).then(() => this.sendHeartbeat());\n    }\n    async sendHeartbeat() {\n        console.log('Sending heartbeat');\n        await this.autoApi.sendSdkHeartbeat(this.testRunId);\n        console.log('Heartbeat sent');\n        this.scheduleNextHeartbeat();\n    }\n    async end() {\n        if (this.nextHeartbeat !== undefined) {\n            this.enabled = false;\n            console.debug('Ending Applause SDK Heartbeat');\n            await this.nextHeartbeat;\n            console.debug('Applause SDK Heartbeat Ended Successfully');\n        }\n        this.nextHeartbeat = undefined;\n    }\n}\n//# sourceMappingURL=heartbeat.js.map","import { writeFileSync } from 'fs';\nimport { AutoApi } from './auto-api.ts';\nimport { TestRunHeartbeatService } from './heartbeat.ts';\nimport { join as pathJoin } from 'path';\nexport class ApplauseReporter {\n    autoApi;\n    initializer;\n    reporter;\n    runStarted = false;\n    runFinished = false;\n    constructor(config) {\n        this.autoApi = new AutoApi(config);\n        this.initializer = new RunInitializer(this.autoApi);\n    }\n    runnerStart(tests) {\n        this.reporter = this.initializer.initializeRun(tests);\n        void this.reporter.then(() => {\n            this.runStarted = true;\n        });\n    }\n    startTestCase(id, testCaseName, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot start a test case for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.startTestCase(id, testCaseName, params));\n    }\n    submitTestCaseResult(id, status, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot submit test case result for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.submitTestCaseResult(id, status, params));\n    }\n    async runnerEnd() {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot end a run that was never initialized');\n        }\n        await this.reporter\n            .then(reporter => reporter.runnerEnd())\n            .then(() => (this.runFinished = true));\n    }\n    isSynchronized() {\n        // Verify the run is not yet started or it has ended, and all calls made to the applause api have finished\n        return ((!this.runStarted || (this.runStarted && this.runFinished)) &&\n            this.autoApi.getCallsInFlight == 0);\n    }\n}\nexport class RunInitializer {\n    autoApi;\n    constructor(autoApi) {\n        this.autoApi = autoApi;\n    }\n    async initializeRun(tests) {\n        const cleanedTests = tests\n            ?.map(parseTestCaseName)\n            .map(parsed => parsed.testCaseName.trim());\n        const testRunCreateResponse = await this.autoApi.startTestRun({\n            tests: cleanedTests || [],\n        });\n        if (testRunCreateResponse.status < 200 ||\n            testRunCreateResponse.status > 300) {\n            throw new Error('Unable to create test run');\n        }\n        const runId = testRunCreateResponse.data.runId;\n        console.log('Test Run %d initialized', runId);\n        const heartbeatService = new TestRunHeartbeatService(runId, this.autoApi);\n        await heartbeatService.start();\n        return new RunReporter(this.autoApi, runId, heartbeatService);\n    }\n}\nexport class RunReporter {\n    autoApi;\n    testRunId;\n    heartbeatService;\n    uidToResultIdMap = {};\n    resultSubmissionMap = {};\n    constructor(autoApi, testRunId, heartbeatService) {\n        this.autoApi = autoApi;\n        this.testRunId = testRunId;\n        this.heartbeatService = heartbeatService;\n    }\n    startTestCase(id, testCaseName, params) {\n        const parsedTestCase = parseTestCaseName(testCaseName);\n        this.uidToResultIdMap[id] = this.autoApi\n            .startTestCase({\n            testCaseName: parsedTestCase.testCaseName,\n            testCaseId: parsedTestCase.testRailTestCaseId,\n            itwTestCaseId: parsedTestCase.applauseTestCaseId,\n            testRunId: this.testRunId,\n            // If the additional params provides either test case id, it will override the parsed value we set above\n            ...Object.fromEntries(Object.entries(params || {}).filter(([_, v]) => v !== undefined)),\n        })\n            .then(res => {\n            return res.data.testResultId;\n        });\n    }\n    submitTestCaseResult(id, status, params) {\n        this.resultSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId => this.autoApi.submitTestCaseResult({\n            status: status,\n            testResultId: resultId,\n            ...params,\n        }));\n    }\n    async runnerEnd() {\n        // Wait for all results to be created\n        const resultIds = (await Promise.all(Object.values(this.uidToResultIdMap))) || [];\n        // Wait for the results to be submitted\n        void (await Promise.all(Object.values(this.resultSubmissionMap)));\n        // Wait the heartbeat to be ended\n        void (await this.heartbeatService.end());\n        void (await this.autoApi.endTestRun(this.testRunId));\n        // Fetch the provider session asset links and save them off to a file\n        const resp = await this.autoApi.getProviderSessionLinks(resultIds);\n        const jsonArray = resp.data || [];\n        if (jsonArray.length > 0) {\n            console.info(JSON.stringify(jsonArray));\n            // this is the wdio.conf outputDir\n            const outputPath = '.';\n            writeFileSync(pathJoin(outputPath, 'providerUrls.txt'), JSON.stringify(jsonArray, null, 1));\n        }\n    }\n}\nconst TEST_RAIL_CASE_ID_PREFIX = 'TestRail-';\nconst APPLAUSE_CASE_ID_PREFIX = 'Applause-';\nfunction parseTestCaseName(testCaseName) {\n    // Split the name on spaces. We will reassemble after parsing out the other ids\n    const tokens = testCaseName.split(' ');\n    let testRailTestCaseId;\n    let applauseTestCaseId;\n    tokens.forEach(token => {\n        if (token?.startsWith(TEST_RAIL_CASE_ID_PREFIX)) {\n            if (testRailTestCaseId !== undefined) {\n                console.warn('Multiple TestRail case ids detected in testCase name');\n            }\n            testRailTestCaseId = token.substring(TEST_RAIL_CASE_ID_PREFIX.length);\n        }\n        else if (token?.startsWith(APPLAUSE_CASE_ID_PREFIX)) {\n            if (applauseTestCaseId !== undefined) {\n                console.warn('Multiple Applause case ids detected in testCase name');\n            }\n            applauseTestCaseId = token.substring(APPLAUSE_CASE_ID_PREFIX.length);\n        }\n    });\n    return {\n        applauseTestCaseId,\n        testRailTestCaseId,\n        testCaseName: tokens\n            .filter(token => token !== `${TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`)\n            .filter(token => token !== `${APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`)\n            .join(' ')\n            .trim(),\n    };\n}\n//# sourceMappingURL=reporter.js.map"],"names":["validator","Validator","default","DEFAULT_URL","overrideConfig","config","overrides","Object","assign","fromEntries","entries","filter","_","v","undefined","isComplete","baseUrl","apiKey","productId","loadConfigFromFile","configFile","configFilePath","process","cwd","existsSync","fileCotents","readFileSync","JSON","parse","validateConfig","Number","isInteger","Error","isURL","protocols","require_tld","allow_query_components","disallow_auth","allow_fragments","allow_protocol_relative_urls","allow_trailing_dot","require_host","require_protocol","isEmpty","AutoApi","options","client","callsInFlight","getCallsInFlight","this","constructor","axios","create","baseURL","timeout","headers","responseType","startTestRun","info","post","sdkVersion","testRailReportingEnabled","testRailOptions","addAllTestsToPlan","testRailProjectId","projectId","testRailSuiteId","suiteId","testRailPlanName","planName","testRailRunName","runName","overrideTestRailRunNameUniqueness","overrideTestRailRunUniqueness","endTestRun","testRunId","delete","startTestCase","params","submitTestCaseResult","getProviderSessionLinks","resultIds","validIds","id","sendSdkHeartbeat","TestResultStatus","exports","TestRunHeartbeatService","autoApi","enabled","nextHeartbeat","start","end","scheduleNextHeartbeat","isEnabled","Promise","resolve","setTimeout","then","sendHeartbeat","console","log","debug","RunInitializer","initializeRun","tests","cleanedTests","map","parseTestCaseName","parsed","testCaseName","trim","testRunCreateResponse","status","runId","data","heartbeatService","RunReporter","uidToResultIdMap","resultSubmissionMap","parsedTestCase","testCaseId","testRailTestCaseId","itwTestCaseId","applauseTestCaseId","res","testResultId","resultId","runnerEnd","all","values","jsonArray","length","stringify","outputPath","writeFileSync","pathJoin","join","TEST_RAIL_CASE_ID_PREFIX","APPLAUSE_CASE_ID_PREFIX","tokens","split","forEach","token","startsWith","warn","substring","initializer","reporter","runStarted","runFinished","runnerStart","isSynchronized","loadOptions","path","properties","finalConfig"],"mappings":"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"}