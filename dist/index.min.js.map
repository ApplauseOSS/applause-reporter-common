{"version":3,"file":"index.min.js","sources":["../src/auto-api/version.ts","../src/auto-api/auto-api-config.ts","../src/auto-api/auto-api.ts","../src/auto-api/dto.ts","../src/auto-api/email/inbox.ts","../src/auto-api/heartbeat.ts","../src/shared/test-case.ts","../src/auto-api/reporter.ts","../src/public-api/dto.ts","../src/public-api/public-api-config.ts","../src/config/config.ts","../src/auto-api/email-helper.ts","../src/public-api/public-api.ts"],"sourcesContent":["export const API_VERSION = '1.0.0';\n//# sourceMappingURL=version.js.map","import Validator from 'validator';\nconst validator = Validator.default;\nexport const DEFAULT_URL = 'https://prod-auto-api.cloud.applause.com/';\nexport const DEFAULT_AUTO_API_PROPERTIES = {\n    autoApiBaseUrl: DEFAULT_URL,\n};\nexport function isAutoApiConfigComplete(config) {\n    return (config.autoApiBaseUrl !== undefined &&\n        config.apiKey !== undefined &&\n        config.productId !== undefined);\n}\nexport function validatePartialAutoApiConfig(config) {\n    if (config.productId !== undefined &&\n        (!Number.isInteger(config.productId) || config.productId <= 0)) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n}\nexport function validateAutoApiConfig(config) {\n    if (!Number.isInteger(config.productId) || config.productId <= 0) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n    if (!validator.isURL(config.autoApiBaseUrl, {\n        protocols: ['http', 'https'],\n        require_tld: false,\n        allow_query_components: false,\n        disallow_auth: true,\n        allow_fragments: false,\n        allow_protocol_relative_urls: false,\n        allow_trailing_dot: false,\n        require_host: true,\n        require_protocol: true,\n    })) {\n        throw new Error(`autoApiBaseUrl is not valid HTTP/HTTPS URL, was: ${config.autoApiBaseUrl}`);\n    }\n    if (validator.isEmpty(config.apiKey)) {\n        throw new Error('apiKey is an empty string!');\n    }\n}\n//# sourceMappingURL=auto-api-config.js.map","import axios from 'axios';\nimport { API_VERSION } from './version.ts';\nimport { validateAutoApiConfig } from './auto-api-config.ts';\nexport class AutoApi {\n    options;\n    client;\n    callsInFlight;\n    /**\n     * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n     */\n    get getCallsInFlight() {\n        return this.callsInFlight;\n    }\n    constructor(options) {\n        this.options = options;\n        this.callsInFlight = 0;\n        validateAutoApiConfig(options);\n        this.client = axios.create({\n            baseURL: options.autoApiBaseUrl,\n            timeout: 10000,\n            headers: {\n                'X-Api-Key': options.apiKey,\n                'Context-Type': 'application/json',\n            },\n            responseType: 'json',\n        });\n        this.client.interceptors.response.use(function (response) {\n            return response;\n        }, function (error) {\n            // log and rethrow\n            const errText = \n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            error.data !== undefined\n                ? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    error.data\n                : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    `error-code [${error.response.status}] with error [${error.response.statusText}]`;\n            console.error(`Auto-Api returned ${errText}`);\n            return Promise.reject(error);\n        });\n    }\n    async startTestRun(info) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.post('/api/v1.0/test-run/create', {\n                // Provided params\n                ...info,\n                // API Version\n                sdkVersion: `js:${API_VERSION}`,\n                // Copy over the product id\n                productId: this.options.productId,\n                // Copy over test rail parameters\n                testRailReportingEnabled: this.options.testRailOptions !== undefined,\n                addAllTestsToPlan: this.options.testRailOptions?.addAllTestsToPlan,\n                testRailProjectId: this.options.testRailOptions?.projectId,\n                testRailSuiteId: this.options.testRailOptions?.suiteId,\n                testRailPlanName: this.options.testRailOptions?.planName,\n                testRailRunName: this.options.testRailOptions?.runName,\n                overrideTestRailRunNameUniqueness: this.options.testRailOptions?.overrideTestRailRunUniqueness,\n            });\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async endTestRun(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.delete(`/api/v1.0/test-run/${testRunId}?endingStatus=COMPLETE`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async startTestCase(params) {\n        this.callsInFlight += 1;\n        try {\n            const res = await this.client.post('/api/v1.0/test-result/create-result', params);\n            return res;\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async submitTestCaseResult(params) {\n        this.callsInFlight += 1;\n        try {\n            await this.client.post('/api/v1.0/test-result', params);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async getProviderSessionLinks(resultIds) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            const validIds = resultIds.filter(id => id);\n            return await this.client.post('/api/v1.0/test-result/provider-info', validIds);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async sendSdkHeartbeat(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            return await this.client.post('/api/v2.0/sdk-heartbeat', {\n                testRunId: testRunId,\n            });\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async getEmailAddress(emailPrefix) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            return await this.client.get(`/api/v1.0/email/get-address?prefix=${emailPrefix}`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async getEmailContent(request) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            return await this.client.post('/api/v1.0/email/download-email', request);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n}\n//# sourceMappingURL=auto-api.js.map","/**\n * Enum representing a test result's status\n */\nexport var TestResultStatus;\n(function (TestResultStatus) {\n    TestResultStatus[\"NOT_RUN\"] = \"NOT_RUN\";\n    TestResultStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    TestResultStatus[\"PASSED\"] = \"PASSED\";\n    TestResultStatus[\"FAILED\"] = \"FAILED\";\n    TestResultStatus[\"SKIPPED\"] = \"SKIPPED\";\n    TestResultStatus[\"CANCELED\"] = \"CANCELED\";\n    TestResultStatus[\"ERROR\"] = \"ERROR\";\n})(TestResultStatus || (TestResultStatus = {}));\n//# sourceMappingURL=dto.js.map","import { simpleParser } from 'mailparser';\nexport class Inbox {\n    emailAddress;\n    autoApi;\n    constructor(emailAddress, autoApi) {\n        this.emailAddress = emailAddress;\n        this.autoApi = autoApi;\n    }\n    async getEmail() {\n        const res = await this.autoApi.getEmailContent({\n            emailAddress: this.emailAddress,\n        });\n        return await simpleParser(res.data);\n    }\n}\n//# sourceMappingURL=inbox.js.map","export class TestRunHeartbeatService {\n    testRunId;\n    autoApi;\n    enabled = false;\n    nextHeartbeat;\n    constructor(testRunId, autoApi) {\n        this.testRunId = testRunId;\n        this.autoApi = autoApi;\n    }\n    async start() {\n        // End the current heartbeat if it has started\n        await this.end();\n        // Set up va new interval\n        this.enabled = true;\n        this.scheduleNextHeartbeat();\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    scheduleNextHeartbeat() {\n        if (!this.enabled) {\n            return;\n        }\n        this.nextHeartbeat = new Promise(resolve => setTimeout(resolve, 5000)).then(() => this.sendHeartbeat());\n    }\n    async sendHeartbeat() {\n        console.log('Sending heartbeat');\n        await this.autoApi.sendSdkHeartbeat(this.testRunId);\n        console.log('Heartbeat sent');\n        this.scheduleNextHeartbeat();\n    }\n    async end() {\n        if (this.nextHeartbeat !== undefined) {\n            this.enabled = false;\n            console.debug('Ending Applause SDK Heartbeat');\n            await this.nextHeartbeat;\n            console.debug('Applause SDK Heartbeat Ended Successfully');\n        }\n        this.nextHeartbeat = undefined;\n    }\n}\n//# sourceMappingURL=heartbeat.js.map","export const TEST_RAIL_CASE_ID_PREFIX = 'TestRail-';\nexport const APPLAUSE_CASE_ID_PREFIX = 'Applause-';\nexport function parseTestCaseName(testCaseName) {\n    const matches = testCaseName.match(/(TestRail-\\d+|Applause-\\d+)/g);\n    const testRailCaseIds = matches\n        ?.filter(match => match.startsWith(TEST_RAIL_CASE_ID_PREFIX))\n        .map(match => match.substring(TEST_RAIL_CASE_ID_PREFIX.length)) || [];\n    const applauseCaseIds = matches\n        ?.filter(match => match.startsWith(APPLAUSE_CASE_ID_PREFIX))\n        .map(match => match.substring(APPLAUSE_CASE_ID_PREFIX.length)) || [];\n    if (testRailCaseIds.length > 1) {\n        console.warn('Multiple TestRail case ids detected in testCase name');\n    }\n    if (applauseCaseIds.length > 1) {\n        console.warn('Multiple Applause case ids detected in testCase name');\n    }\n    return {\n        applauseTestCaseId: applauseCaseIds[0],\n        testRailTestCaseId: testRailCaseIds[0],\n        testCaseName: testCaseName\n            .replace(/(TestRail-\\d+|Applause-\\d+)/g, '')\n            .replace(/\\s+/g, ' ')\n            .trim(),\n    };\n}\n//# sourceMappingURL=test-case.js.map","import { writeFileSync } from 'fs';\nimport { AutoApi } from './auto-api.ts';\nimport { TestRunHeartbeatService } from './heartbeat.ts';\nimport { join as pathJoin } from 'path';\nimport { parseTestCaseName } from '../shared/test-case.ts';\nexport class ApplauseReporter {\n    autoApi;\n    initializer;\n    reporter;\n    runStarted = false;\n    runFinished = false;\n    constructor(config) {\n        this.autoApi = new AutoApi(config);\n        this.initializer = new RunInitializer(this.autoApi);\n    }\n    runnerStart(tests) {\n        this.reporter = this.initializer.initializeRun(tests);\n        void this.reporter.then(() => {\n            this.runStarted = true;\n        });\n    }\n    startTestCase(id, testCaseName, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot start a test case for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.startTestCase(id, testCaseName, params));\n    }\n    submitTestCaseResult(id, status, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot submit test case result for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.submitTestCaseResult(id, status, params));\n    }\n    async runnerEnd() {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot end a run that was never initialized');\n        }\n        await this.reporter\n            .then(reporter => reporter.runnerEnd())\n            .then(() => (this.runFinished = true));\n    }\n    isSynchronized() {\n        // Verify the run is not yet started or it has ended, and all calls made to the applause api have finished\n        return ((!this.runStarted || (this.runStarted && this.runFinished)) &&\n            this.autoApi.getCallsInFlight == 0);\n    }\n}\nexport class RunInitializer {\n    autoApi;\n    constructor(autoApi) {\n        this.autoApi = autoApi;\n    }\n    async initializeRun(tests) {\n        const cleanedTests = tests\n            ?.map(parseTestCaseName)\n            .map(parsed => parsed.testCaseName.trim());\n        const testRunCreateResponse = await this.autoApi.startTestRun({\n            tests: cleanedTests || [],\n        });\n        if (testRunCreateResponse.status < 200 ||\n            testRunCreateResponse.status > 300) {\n            throw new Error('Unable to create test run');\n        }\n        const runId = testRunCreateResponse.data.runId;\n        console.log('Test Run %d initialized', runId);\n        const heartbeatService = new TestRunHeartbeatService(runId, this.autoApi);\n        await heartbeatService.start();\n        return new RunReporter(this.autoApi, runId, heartbeatService);\n    }\n}\nexport class RunReporter {\n    autoApi;\n    testRunId;\n    heartbeatService;\n    uidToResultIdMap = {};\n    resultSubmissionMap = {};\n    constructor(autoApi, testRunId, heartbeatService) {\n        this.autoApi = autoApi;\n        this.testRunId = testRunId;\n        this.heartbeatService = heartbeatService;\n    }\n    startTestCase(id, testCaseName, params) {\n        const parsedTestCase = parseTestCaseName(testCaseName);\n        this.uidToResultIdMap[id] = this.autoApi\n            .startTestCase({\n            testCaseName: parsedTestCase.testCaseName,\n            testCaseId: parsedTestCase.testRailTestCaseId,\n            itwTestCaseId: parsedTestCase.applauseTestCaseId,\n            testRunId: this.testRunId,\n            // If the additional params provides either test case id, it will override the parsed value we set above\n            ...Object.fromEntries(Object.entries(params || {}).filter(([_, v]) => v !== undefined)),\n        })\n            .then(res => {\n            return res.data.testResultId;\n        });\n    }\n    submitTestCaseResult(id, status, params) {\n        this.resultSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId => this.autoApi.submitTestCaseResult({\n            status: status,\n            testResultId: resultId,\n            ...params,\n        }));\n    }\n    async runnerEnd() {\n        // Wait for all results to be created\n        const resultIds = (await Promise.all(Object.values(this.uidToResultIdMap))) || [];\n        // Wait for the results to be submitted\n        void (await Promise.all(Object.values(this.resultSubmissionMap)));\n        // Wait the heartbeat to be ended\n        void (await this.heartbeatService.end());\n        void (await this.autoApi.endTestRun(this.testRunId));\n        // Fetch the provider session asset links and save them off to a file\n        const resp = await this.autoApi.getProviderSessionLinks(resultIds);\n        const jsonArray = resp.data || [];\n        if (jsonArray.length > 0) {\n            console.info(JSON.stringify(jsonArray));\n            // this is the wdio.conf outputDir\n            const outputPath = '.';\n            writeFileSync(pathJoin(outputPath, 'providerUrls.txt'), JSON.stringify(jsonArray, null, 1));\n        }\n    }\n}\n//# sourceMappingURL=reporter.js.map","export var TestRunAutoResultStatus;\n(function (TestRunAutoResultStatus) {\n    TestRunAutoResultStatus[\"PASSED\"] = \"PASSED\";\n    TestRunAutoResultStatus[\"FAILED\"] = \"FAILED\";\n    TestRunAutoResultStatus[\"SKIPPED\"] = \"SKIPPED\";\n    TestRunAutoResultStatus[\"CANCELED\"] = \"CANCELED\";\n    TestRunAutoResultStatus[\"ERROR\"] = \"ERROR\";\n})(TestRunAutoResultStatus || (TestRunAutoResultStatus = {}));\n//# sourceMappingURL=dto.js.map","import Validator from 'validator';\nconst validator = Validator.default;\nexport const DEFAULT_URL = 'https://api.applause.com/';\nexport const DEFAULT_PUBLIC_API_PROPERTIES = {\n    publicApiBaseUrl: DEFAULT_URL,\n};\nexport function isPublicApiConfigComplete(config) {\n    return (config.publicApiBaseUrl !== undefined &&\n        config.apiKey !== undefined &&\n        config.productId !== undefined);\n}\nexport function validatePartialPublicApiConfig(config) {\n    if (config.productId !== undefined &&\n        (!Number.isInteger(config.productId) || config.productId <= 0)) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n}\nexport function validatePublicApiConfig(config) {\n    if (!Number.isInteger(config.productId) || config.productId <= 0) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n    if (!validator.isURL(config.publicApiBaseUrl, {\n        protocols: ['http', 'https'],\n        require_tld: false,\n        allow_query_components: false,\n        disallow_auth: true,\n        allow_fragments: false,\n        allow_protocol_relative_urls: false,\n        allow_trailing_dot: false,\n        require_host: true,\n        require_protocol: true,\n    })) {\n        throw new Error(`publicApiBaseUrl is not valid HTTP/HTTPS URL, was: ${config.publicApiBaseUrl}`);\n    }\n    if (validator.isEmpty(config.apiKey)) {\n        throw new Error('apiKey is an empty string!');\n    }\n}\n//# sourceMappingURL=public-api-config.js.map","import { existsSync, readFileSync } from 'fs';\nimport path from 'path';\nimport { DEFAULT_AUTO_API_PROPERTIES, isAutoApiConfigComplete, validateAutoApiConfig, } from '../auto-api/auto-api-config.ts';\nimport { DEFAULT_PUBLIC_API_PROPERTIES, isPublicApiConfigComplete, validatePublicApiConfig, } from '../public-api/public-api-config.ts';\n// Loads the configuration\nexport function loadConfig(loadOptions) {\n    // Setup the initial config with any default properties\n    let config = {\n        ...DEFAULT_PUBLIC_API_PROPERTIES,\n        ...DEFAULT_AUTO_API_PROPERTIES,\n    };\n    // Load properties from the provided config file\n    if (loadOptions !== undefined && loadOptions.configFile !== undefined) {\n        config = overrideConfig(config, loadConfigFromFile(path.join(process.cwd(), loadOptions.configFile)));\n    }\n    else {\n        // Override from the default config file\n        config = overrideConfig(config, loadConfigFromFile());\n    }\n    // Then load in the file override properties\n    if (loadOptions !== undefined && loadOptions.properties !== undefined) {\n        config = overrideConfig(config, loadOptions.properties);\n    }\n    if (!isComplete(config)) {\n        throw new Error('Config is not complete');\n    }\n    // We know that the config is complete, so we can cast\n    const finalConfig = config;\n    validateConfig(finalConfig);\n    return finalConfig;\n}\nexport function overrideConfig(config, overrides) {\n    return Object.assign({}, config, Object.fromEntries(Object.entries(overrides || {}).filter(([_, v]) => v !== undefined)));\n}\nexport function isComplete(config) {\n    return isAutoApiConfigComplete(config) && isPublicApiConfigComplete(config);\n}\nexport function loadConfigFromFile(configFile) {\n    const configFilePath = configFile || process.cwd() + '/applause.json';\n    if (!existsSync(configFilePath)) {\n        return {};\n    }\n    const fileCotents = readFileSync(configFilePath, 'utf8');\n    return JSON.parse(fileCotents);\n}\nexport function validateConfig(config) {\n    validateAutoApiConfig(config);\n    validatePublicApiConfig(config);\n}\nexport function validatePartialConfig(config) {\n    if (config.productId !== undefined &&\n        (!Number.isInteger(config.productId) || config.productId <= 0)) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n}\n//# sourceMappingURL=config.js.map","import { Inbox } from './email/inbox.ts';\nexport class EmailHelper {\n    autoApi;\n    constructor(autoApi) {\n        this.autoApi = autoApi;\n    }\n    async getInbox(emailPrefix) {\n        const generatedAddress = (await this.autoApi.getEmailAddress(emailPrefix)).data.emailAddress;\n        return new Inbox(generatedAddress, this.autoApi);\n    }\n}\nexport * from './email/attachment.ts';\nexport * from './email/inbox.ts';\n//# sourceMappingURL=email-helper.js.map","import axios from 'axios';\nimport { validatePublicApiConfig, } from './public-api-config.ts';\nexport class PublicApi {\n    options;\n    client;\n    callsInFlight;\n    /**\n     * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n     */\n    get getCallsInFlight() {\n        return this.callsInFlight;\n    }\n    constructor(options) {\n        this.options = options;\n        this.callsInFlight = 0;\n        validatePublicApiConfig(options);\n        this.client = axios.create({\n            baseURL: options.publicApiBaseUrl,\n            timeout: 10000,\n            headers: {\n                'X-Api-Key': options.apiKey,\n                'Context-Type': 'application/json',\n            },\n            responseType: 'json',\n        });\n        this.client.interceptors.response.use(function (response) {\n            return response;\n        }, function (error) {\n            // log and rethrow\n            const errText = \n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            error.data !== undefined\n                ? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    error.data\n                : // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    `error-code [${error.response.status}] with error [${error.response.statusText}]`;\n            console.error(`Public-Api returned ${errText}`);\n            return Promise.reject(error);\n        });\n    }\n    async submitResult(testCaseId, info) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.post(`v2/test-case-results/${testCaseId}/submit`, info);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n}\n//# sourceMappingURL=public-api.js.map"],"names":["validator","Validator","default","DEFAULT_AUTO_API_PROPERTIES","autoApiBaseUrl","validateAutoApiConfig","config","Number","isInteger","productId","Error","isURL","protocols","require_tld","allow_query_components","disallow_auth","allow_fragments","allow_protocol_relative_urls","allow_trailing_dot","require_host","require_protocol","isEmpty","apiKey","AutoApi","options","client","callsInFlight","getCallsInFlight","this","constructor","axios","create","baseURL","timeout","headers","responseType","interceptors","response","use","error","errText","undefined","data","status","statusText","console","Promise","reject","startTestRun","info","post","sdkVersion","testRailReportingEnabled","testRailOptions","addAllTestsToPlan","testRailProjectId","projectId","testRailSuiteId","suiteId","testRailPlanName","planName","testRailRunName","runName","overrideTestRailRunNameUniqueness","overrideTestRailRunUniqueness","endTestRun","testRunId","delete","startTestCase","params","submitTestCaseResult","getProviderSessionLinks","resultIds","validIds","filter","id","sendSdkHeartbeat","getEmailAddress","emailPrefix","get","getEmailContent","request","TestResultStatus","exports","Inbox","emailAddress","autoApi","getEmail","res","simpleParser","TestRunHeartbeatService","enabled","nextHeartbeat","start","end","scheduleNextHeartbeat","isEnabled","resolve","setTimeout","then","sendHeartbeat","log","debug","TEST_RAIL_CASE_ID_PREFIX","APPLAUSE_CASE_ID_PREFIX","parseTestCaseName","testCaseName","matches","match","testRailCaseIds","startsWith","map","substring","applauseCaseIds","length","warn","applauseTestCaseId","testRailTestCaseId","replace","trim","RunInitializer","initializeRun","tests","cleanedTests","parsed","testRunCreateResponse","runId","heartbeatService","RunReporter","uidToResultIdMap","resultSubmissionMap","parsedTestCase","testCaseId","itwTestCaseId","Object","fromEntries","entries","_","v","testResultId","resultId","runnerEnd","all","values","jsonArray","JSON","stringify","outputPath","writeFileSync","pathJoin","join","TestRunAutoResultStatus","DEFAULT_PUBLIC_API_PROPERTIES","publicApiBaseUrl","validatePublicApiConfig","overrideConfig","overrides","assign","isComplete","isAutoApiConfigComplete","isPublicApiConfigComplete","loadConfigFromFile","configFile","configFilePath","process","cwd","existsSync","fileCotents","readFileSync","parse","validateConfig","initializer","reporter","runStarted","runFinished","runnerStart","isSynchronized","getInbox","generatedAddress","submitResult","loadOptions","path","properties","finalConfig"],"mappings":"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"}