{"version":3,"file":"index.min.js","sources":["../src/version.ts","../src/config.ts","../src/auto-api.ts","../src/dto.ts","../src/heartbeat.ts","../src/reporter.ts"],"sourcesContent":["export const API_VERSION = '1.0.0';\n//# sourceMappingURL=version.js.map","import { readFileSync } from 'fs';\nimport path from 'path';\nimport Validator from 'validator';\nconst validator = Validator.default;\nexport const DEFAULT_URL = 'https://prod-auto-api.cloud.applause.com/';\n// Loads the configuration\nexport function loadConfig(loadOptions) {\n    // Setup the initial config with any default properties\n    let config = {\n        baseUrl: DEFAULT_URL,\n    };\n    // Load properties from the provided config file\n    if (loadOptions !== undefined && loadOptions.configFile !== undefined) {\n        config = overrideConfig(config, loadConfigFromFile(path.join(process.cwd(), loadOptions.configFile)));\n    }\n    else {\n        // Override from the default config file\n        config = overrideConfig(config, loadConfigFromFile());\n    }\n    // Then load in the file override properties\n    if (loadOptions !== undefined && loadOptions.properties !== undefined) {\n        config = overrideConfig(config, loadOptions.properties);\n    }\n    if (!isComplete(config)) {\n        throw new Error('Config is not complete');\n    }\n    // We know that the config is complete, so we can cast\n    const finalConfig = config;\n    validateConfig(finalConfig);\n    return finalConfig;\n}\nexport function overrideConfig(config, overrides) {\n    return {\n        ...config,\n        ...overrides,\n    };\n}\nexport function isComplete(config) {\n    return (config.baseUrl !== undefined &&\n        config.apiKey !== undefined &&\n        config.productId !== undefined);\n}\nexport function loadConfigFromFile(configFile) {\n    const fileCotents = readFileSync(configFile || process.cwd() + '/applause.json', 'utf8');\n    return JSON.parse(fileCotents);\n}\nexport function validateConfig(config) {\n    if (!Number.isInteger(config.productId) || config.productId <= 0) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n    if (!validator.isURL(config.baseUrl, {\n        protocols: ['http', 'https'],\n        require_tld: false,\n        allow_query_components: false,\n        disallow_auth: true,\n        allow_fragments: false,\n        allow_protocol_relative_urls: false,\n        allow_trailing_dot: false,\n        require_host: true,\n        require_protocol: true,\n    })) {\n        throw new Error(`baseUrl is not valid HTTP/HTTPS URL, was: ${config.baseUrl}`);\n    }\n    if (validator.isEmpty(config.apiKey)) {\n        throw new Error('apiKey is an empty string!');\n    }\n}\nexport function validatePartialConfig(config) {\n    if (config.productId !== undefined &&\n        (!Number.isInteger(config.productId) || config.productId <= 0)) {\n        throw new Error(`productId must be a positive integer, was: '${config.productId}'`);\n    }\n}\n//# sourceMappingURL=config.js.map","import axios from 'axios';\nimport { API_VERSION } from './version.ts';\nimport { validateConfig } from './config.ts';\nexport class AutoApi {\n    options;\n    client;\n    callsInFlight;\n    /**\n     * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n     */\n    get getCallsInFlight() {\n        return this.callsInFlight;\n    }\n    constructor(options) {\n        this.options = options;\n        this.callsInFlight = 0;\n        validateConfig(options);\n        this.client = axios.create({\n            baseURL: options.baseUrl,\n            timeout: 10000,\n            headers: {\n                'X-Api-Key': options.apiKey,\n                'Context-Type': 'application/json',\n            },\n            responseType: 'json',\n        });\n    }\n    async startTestRun(info) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.post('/api/v1.0/test-run/create', {\n                // Provided params\n                ...info,\n                // API Version\n                sdkVersion: `js:${API_VERSION}`,\n                // Copy over the product id\n                productId: this.options.productId,\n                // Copy over test rail parameters\n                testRailReportingEnabled: this.options.testRailOptions !== undefined,\n                addAllTestsToPlan: this.options.testRailOptions?.addAllTestsToPlan,\n                testRailProjectId: this.options.testRailOptions?.projectId,\n                testRailSuiteId: this.options.testRailOptions?.suiteId,\n                testRailPlanName: this.options.testRailOptions?.planName,\n                testRailRunName: this.options.testRailOptions?.runName,\n                overrideTestRailRunNameUniqueness: this.options.testRailOptions?.overrideTestRailRunUniqueness,\n            });\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async endTestRun(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            return await this.client.delete(`/api/v3.0/driver-session/${testRunId}?sessionStatus=COMPLETE`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async startTestCase(params) {\n        this.callsInFlight += 1;\n        try {\n            const res = await this.client.post('/api/v1.0/test-result/create-result', params);\n            return res;\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async submitTestCaseResult(params) {\n        this.callsInFlight += 1;\n        try {\n            await this.client.post('/api/v1.0/test-result', params);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async getProviderSessionLinks(resultIds) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            const validIds = resultIds.filter(id => id);\n            return await this.client.post('/api/v1.0/test-result/provider-info', validIds);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n    async sendSdkHeartbeat(testRunId) {\n        this.callsInFlight += 1;\n        try {\n            // this filters out falsy values (null, undefined, 0)\n            return await this.client.post(`/api/v2.0/sdk-heartbeat?testRunId=${testRunId}`);\n        }\n        finally {\n            this.callsInFlight -= 1;\n        }\n    }\n}\n//# sourceMappingURL=auto-api.js.map","/**\n * Enum representing a test result's status\n */\nexport var TestResultStatus;\n(function (TestResultStatus) {\n    TestResultStatus[\"NOT_RUN\"] = \"NOT_RUN\";\n    TestResultStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    TestResultStatus[\"PASSED\"] = \"PASSED\";\n    TestResultStatus[\"FAILED\"] = \"FAILED\";\n    TestResultStatus[\"SKIPPED\"] = \"SKIPPED\";\n    TestResultStatus[\"CANCELED\"] = \"CANCELED\";\n    TestResultStatus[\"ERROR\"] = \"ERROR\";\n})(TestResultStatus || (TestResultStatus = {}));\n//# sourceMappingURL=dto.js.map","export class TestRunHeartbeatService {\n    testRunId;\n    autoApi;\n    enabled = false;\n    nextHeartbeat;\n    constructor(testRunId, autoApi) {\n        this.testRunId = testRunId;\n        this.autoApi = autoApi;\n    }\n    async start() {\n        // End the current heartbeat if it has started\n        await this.end();\n        // Set up va new interval\n        this.enabled = true;\n        this.scheduleNextHeartbeat();\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    scheduleNextHeartbeat() {\n        if (!this.enabled) {\n            return;\n        }\n        this.nextHeartbeat = new Promise(resolve => setTimeout(resolve, 5000)).then(() => this.sendHeartbeat());\n    }\n    async sendHeartbeat() {\n        console.log('Sending heartbeat');\n        await this.autoApi.sendSdkHeartbeat(this.testRunId);\n        console.log('Heartbeat sent');\n        this.scheduleNextHeartbeat();\n    }\n    async end() {\n        if (this.nextHeartbeat !== undefined) {\n            this.enabled = false;\n            console.debug('Ending Applause SDK Heartbeat');\n            await this.nextHeartbeat;\n            console.debug('Applause SDK Heartbeat Ended Successfully');\n        }\n        this.nextHeartbeat = undefined;\n    }\n}\n//# sourceMappingURL=heartbeat.js.map","import { writeFileSync } from 'fs';\nimport { AutoApi } from './auto-api.ts';\nimport { TestRunHeartbeatService } from './heartbeat.ts';\nimport { join as pathJoin } from 'path';\nexport class ApplauseReporter {\n    autoApi;\n    initializer;\n    reporter;\n    constructor(config) {\n        this.autoApi = new AutoApi(config);\n        this.initializer = new RunInitializer(this.autoApi);\n    }\n    runnerStart(tests) {\n        this.reporter = this.initializer.initializeRun(tests);\n    }\n    startTestCase(id, testCaseName, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot start a test case for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.startTestCase(id, testCaseName, params));\n    }\n    submitTestCaseResult(id, status, params) {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot submit test case result for a run that was never initialized');\n        }\n        void this.reporter.then(reporter => reporter.submitTestCaseResult(id, status, params));\n    }\n    async runnerEnd() {\n        if (this.reporter === undefined) {\n            throw new Error('Cannot end a run that was never initialized');\n        }\n        await this.reporter.then(reporter => reporter.runnerEnd());\n    }\n}\nclass RunInitializer {\n    autoApi;\n    constructor(autoApi) {\n        this.autoApi = autoApi;\n    }\n    async initializeRun(tests) {\n        const testRunCreateResponse = await this.autoApi.startTestRun({\n            tests: tests || [],\n        });\n        if (testRunCreateResponse.status < 200 ||\n            testRunCreateResponse.status > 300) {\n            throw new Error('Unable to create test run');\n        }\n        const runId = testRunCreateResponse.data.runId;\n        console.log('Test Run %d initialized', runId);\n        const heartbeatService = new TestRunHeartbeatService(runId, this.autoApi);\n        await heartbeatService.start();\n        return new RunReporter(this.autoApi, runId, heartbeatService);\n    }\n}\nclass RunReporter {\n    autoApi;\n    testRunId;\n    heartbeatService;\n    TEST_RAIL_CASE_ID_PREFIX = 'TestRail-';\n    APPLAUSE_CASE_ID_PREFIX = 'Applause-';\n    uidToResultIdMap = {};\n    resultSubmissionMap = {};\n    constructor(autoApi, testRunId, heartbeatService) {\n        this.autoApi = autoApi;\n        this.testRunId = testRunId;\n        this.heartbeatService = heartbeatService;\n    }\n    startTestCase(id, testCaseName, params) {\n        const parsedTestCase = this.parseTestCaseName(testCaseName);\n        this.uidToResultIdMap[id] = this.autoApi\n            .startTestCase({\n            testCaseName: parsedTestCase.testCaseName,\n            testCaseId: parsedTestCase.testRailTestCaseId,\n            itwTestCaseId: parsedTestCase.applauseTestCaseId,\n            testRunId: this.testRunId,\n            // If the additional params provides either test case id, it will override the parsed value we set above\n            ...params,\n        })\n            .then(res => {\n            return res.data.testResultId;\n        });\n    }\n    submitTestCaseResult(id, status, params) {\n        this.resultSubmissionMap[id] = this.uidToResultIdMap[id]?.then(resultId => this.autoApi.submitTestCaseResult({\n            status: status,\n            testResultId: resultId,\n            ...params,\n        }));\n    }\n    parseTestCaseName(testCaseName) {\n        // Split the name on spaces. We will reassemble after parsing out the other ids\n        const tokens = testCaseName.split(' ');\n        let testRailTestCaseId;\n        let applauseTestCaseId;\n        tokens.forEach(token => {\n            if (token?.startsWith(this.TEST_RAIL_CASE_ID_PREFIX)) {\n                if (testRailTestCaseId !== undefined) {\n                    console.warn('Multiple TestRail case ids detected in testCase name');\n                }\n                testRailTestCaseId = token.substring(this.TEST_RAIL_CASE_ID_PREFIX.length);\n            }\n            else if (token?.startsWith(this.APPLAUSE_CASE_ID_PREFIX)) {\n                if (applauseTestCaseId !== undefined) {\n                    console.warn('Multiple Applause case ids detected in testCase name');\n                }\n                applauseTestCaseId = token.substring(this.APPLAUSE_CASE_ID_PREFIX.length);\n            }\n        });\n        return {\n            applauseTestCaseId,\n            testRailTestCaseId,\n            testCaseName: tokens\n                .filter(token => token !==\n                `${this.TEST_RAIL_CASE_ID_PREFIX}${testRailTestCaseId || ''}`)\n                .filter(token => token !==\n                `${this.APPLAUSE_CASE_ID_PREFIX}${applauseTestCaseId || ''}`)\n                .join(' '),\n        };\n    }\n    async runnerEnd() {\n        // Wait for all results to be created\n        const resultIds = (await Promise.all(Object.values(this.uidToResultIdMap))) || [];\n        // Wait for the results to be submitted\n        void (await Promise.all(Object.values(this.resultSubmissionMap)));\n        // Wait the heartbeat to be ended\n        void (await this.heartbeatService.end());\n        void (await this.autoApi.endTestRun(this.testRunId));\n        // Fetch the provider session asset links and save them off to a file\n        const resp = await this.autoApi.getProviderSessionLinks(resultIds);\n        const jsonArray = resp.data || [];\n        if (jsonArray.length > 0) {\n            console.info(JSON.stringify(jsonArray));\n            // this is the wdio.conf outputDir\n            const outputPath = '.';\n            writeFileSync(pathJoin(outputPath, 'providerUrls.txt'), JSON.stringify(jsonArray, null, 1));\n        }\n    }\n}\n//# sourceMappingURL=reporter.js.map"],"names":["validator","Validator","default","DEFAULT_URL","overrideConfig","config","overrides","isComplete","undefined","baseUrl","apiKey","productId","loadConfigFromFile","configFile","fileCotents","readFileSync","process","cwd","JSON","parse","validateConfig","Number","isInteger","Error","isURL","protocols","require_tld","allow_query_components","disallow_auth","allow_fragments","allow_protocol_relative_urls","allow_trailing_dot","require_host","require_protocol","isEmpty","AutoApi","options","client","callsInFlight","getCallsInFlight","this","constructor","axios","create","baseURL","timeout","headers","responseType","startTestRun","info","post","sdkVersion","testRailReportingEnabled","testRailOptions","addAllTestsToPlan","testRailProjectId","projectId","testRailSuiteId","suiteId","testRailPlanName","planName","testRailRunName","runName","overrideTestRailRunNameUniqueness","overrideTestRailRunUniqueness","endTestRun","testRunId","delete","startTestCase","params","submitTestCaseResult","getProviderSessionLinks","resultIds","validIds","filter","id","sendSdkHeartbeat","TestResultStatus","exports","TestRunHeartbeatService","autoApi","enabled","nextHeartbeat","start","end","scheduleNextHeartbeat","isEnabled","Promise","resolve","setTimeout","then","sendHeartbeat","console","log","debug","RunInitializer","initializeRun","tests","testRunCreateResponse","status","runId","data","heartbeatService","RunReporter","TEST_RAIL_CASE_ID_PREFIX","APPLAUSE_CASE_ID_PREFIX","uidToResultIdMap","resultSubmissionMap","testCaseName","parsedTestCase","parseTestCaseName","testCaseId","testRailTestCaseId","itwTestCaseId","applauseTestCaseId","res","testResultId","resultId","tokens","split","forEach","token","startsWith","warn","substring","length","join","runnerEnd","all","Object","values","jsonArray","stringify","outputPath","writeFileSync","pathJoin","initializer","reporter","runnerStart","loadOptions","path","properties","finalConfig"],"mappings":"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"}