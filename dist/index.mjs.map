{"version":3,"file":"index.mjs","sources":["../src/dto.ts","../src/index.ts"],"sourcesContent":["export interface CreateTestResultDto {\n  /** id of test result we're currently processing * */\n  testResultId: number;\n  testRailTestCaseId: string;\n  applauseTestCaseId: number;\n}\n\nexport interface TestResultParamDto {\n  /**  This is NOT the test session ID\n    This field has been overloaded to have two meanings depending on which part\n    of auto-api processing you are doing.\n       - Sometimes it is the TestRail identifier for the test case\n         When the data is first passed from the SDK to auto-api in the\n         see TestResultController#createTestResult\n       - Other times it s the DB row ID for the TestResult hibernate object\n         see TestResultController#submitTestResult\n    For this reason, this field is deprecated.  We still use it for legacy instances\n    of the SDK, but it's going away, replaced by new fields **/\n  testResultId?: number;\n\n  /** Id in auto-api DB **/\n  dbRowId?: number;\n\n  /** The TestRail test identifier as defined by the user of the SDK.  Sent from the SDK to auto-api */\n  testRailCaseId?: number;\n\n  /** The ITW test identifier as defined by the user of the SDK.  Sent from the SDK to auto-api*/\n  itwCaseId?: number;\n\n  driverConfigId?: number;\n\n  /** The driver group (serverside only) being used by test results */\n  driverGroupId?: number;\n\n  /** The ending status of the test. */\n  status: TestResultStatus;\n\n  /** Optional reason why the test failed. */\n  failureReason?: string;\n}\n\nexport enum TestResultStatus {\n  NOT_RUN = 'NOT_RUN',\n  IN_PROGRESS = 'IN_PROGRESS',\n  PASSED = 'PASSED',\n  FAILED = 'FAILED',\n  SKIPPED = 'SKIPPED',\n  CANCELED = 'CANCELED',\n  ERROR = 'ERROR',\n}\n\nexport interface TestResultProviderInfo {\n  testResultId: number;\n  providerUrl: string;\n}\n","import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  CreateTestResultDto,\n  TestResultParamDto,\n  TestResultProviderInfo,\n  TestResultStatus,\n} from './dto';\nimport validator from 'validator';\n\nexport type ClientConfig = {\n  readonly baseUrl: string;\n  readonly apiKey: string;\n};\n\nexport class AutoApi {\n  private readonly client: AxiosInstance;\n\n  private callsInFlight: number;\n  /**\n   * tracks number of HTTP calls in progress, used by reporters that want to know when our async work is finished\n   */\n  public get getCallsInFlight(): number {\n    return this.callsInFlight;\n  }\n\n  constructor(\n    private readonly options: {\n      readonly clientConfig: ClientConfig | AxiosInstance;\n      readonly productId: number;\n      readonly groupingName?: string;\n    }\n  ) {\n    this.callsInFlight = 0;\n    _validateCtorParams(options);\n    this.client = _isAxiosInstance(options.clientConfig)\n      ? options.clientConfig\n      : axios.create({\n          baseURL: options.clientConfig.baseUrl,\n          timeout: 10000,\n          headers: {\n            'X-Api-Key': options.clientConfig.apiKey,\n            'Context-Type': 'application/json',\n          },\n          responseType: 'json',\n        });\n  }\n\n  async startTestCase(\n    testCaseName: string,\n    providerSessionId?: string\n  ): Promise<AxiosResponse<CreateTestResultDto>> {\n    this.callsInFlight += 1;\n    try {\n      if (\n        this.options.groupingName !== undefined &&\n        providerSessionId !== undefined\n      ) {\n        throw new Error(\n          `Provider either groupingName in constructor or providerSessionId in each test start, not both!  Values provided: { providerSessionId: \"${providerSessionId}\\n \", groupingName: \"${this.options.groupingName}\" }`\n        );\n      }\n      const res = await this.client.post<CreateTestResultDto>(\n        '/api/v1.0/test-result/create-ps-result',\n        {\n          testCaseName: testCaseName,\n          productId: this.options.productId,\n          groupingName:\n            this.options.groupingName === undefined\n              ? null\n              : this.options.groupingName,\n          providerSessionId:\n            providerSessionId === undefined ? null : providerSessionId,\n        }\n      );\n      return res;\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async submitTestResult(\n    resultId: number,\n    status: TestResultStatus,\n    failureReason?: string\n  ): Promise<void> {\n    this.callsInFlight += 1;\n    try {\n      const dto: TestResultParamDto = {\n        testResultId: resultId,\n        status: status,\n        failureReason: failureReason,\n      };\n      await this.client.post('/api/v1.0/test-result/submit-ps-result', dto);\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n\n  async getProviderSessionLinks(\n    resultIds: number[]\n  ): Promise<AxiosResponse<TestResultProviderInfo>> {\n    this.callsInFlight += 1;\n    try {\n      // this filters out falsy values (null, undefined, 0)\n      const validIds: number[] = resultIds.filter(id => id);\n      return await this.client.post<TestResultProviderInfo>(\n        '/api/v1.0/test-result/provider-info',\n        validIds\n      );\n    } finally {\n      this.callsInFlight -= 1;\n    }\n  }\n}\n\n/**\n *\n * @param clientConfig user defined type check to see if we were passed an already built AxoisIntance or regular ClientConfig\n */\nconst _isAxiosInstance = (\n  clientConfig: ClientConfig | AxiosInstance\n): clientConfig is AxiosInstance => {\n  // we check for property \"request\" to see if client config object is an Axois instance or regular ClientConfig\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return (clientConfig as AxiosInstance).request !== undefined;\n};\n\n/**\n * Exposed for testing. Don't use this!\n * @private\n *\n * @param params mirrored constructor args from AutoApi class\n */\nexport const _validateCtorParams = (\n  ...params: ConstructorParameters<typeof AutoApi>\n): void => {\n  // product ID sanity\n  if (!Number.isInteger(params[0].productId) || params[0].productId <= 0) {\n    throw new Error(\n      `productId must be a positive integer, was: '${params[0].productId}'`\n    );\n  }\n  // check for specific options if pre-built client wasn't passed\n  if (!_isAxiosInstance(params[0].clientConfig)) {\n    // Base URL sanity\n    if (\n      !validator.isURL(params[0].clientConfig.baseUrl, {\n        protocols: ['http', 'https'],\n      })\n    ) {\n      throw new Error(\n        `baseUrl is not valid HTTP/HTTPS URL, was: ${params[0].clientConfig.baseUrl}`\n      );\n    }\n    // API Key sanity\n    if (validator.isEmpty(params[0].clientConfig.apiKey)) {\n      throw new Error('apiKey is an empty string!');\n    }\n  }\n};\n\n// Re-export DTOs\nexport * from './dto';\n"],"names":[],"mappings":"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"}