!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("axios"),require("validator")):"function"==typeof define&&define.amd?define(["exports","axios","validator"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self)["auto-api-client-js"]={},t.axios,t.validator)}(this,(function(t,e,i){"use strict";function s(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var o,n=s(e),r=s(i);t.TestResultStatus=void 0,(o=t.TestResultStatus||(t.TestResultStatus={})).NOT_RUN="NOT_RUN",o.IN_PROGRESS="IN_PROGRESS",o.PASSED="PASSED",o.FAILED="FAILED",o.SKIPPED="SKIPPED",o.CANCELED="CANCELED",o.ERROR="ERROR";const a=t=>void 0!==t.request,l=(...t)=>{if(!Number.isInteger(t[0].productId)||t[0].productId<=0)throw new Error(`productId must be a positive integer, was: '${t[0].productId}'`);if(!a(t[0].clientConfig)){if(!r.default.isURL(t[0].clientConfig.baseUrl,{protocols:["http","https"]}))throw new Error(`baseUrl is not valid HTTP/HTTPS URL, was: ${t[0].clientConfig.baseUrl}`);if(r.default.isEmpty(t[0].clientConfig.apiKey))throw new Error("apiKey is an empty string!")}};t.AutoApi=class{constructor(t){this.options=t,this.callsInFlight=0,l(t),this.client=a(t.clientConfig)?t.clientConfig:n.default.create({baseURL:t.clientConfig.baseUrl,timeout:1e4,headers:{"X-Api-Key":t.clientConfig.apiKey,"Context-Type":"application/json"},responseType:"json"})}get getCallsInFlight(){return this.callsInFlight}async startTestCase(t,e){this.callsInFlight+=1;try{if(void 0!==this.options.groupingName&&void 0!==e)throw new Error(`Provider either groupingName in constructor or providerSessionId in each test start, not both!  Values provided: { providerSessionId: "${e}\n ", groupingName: "${this.options.groupingName}" }`);return await this.client.post("/api/v1.0/test-result/create-ps-result",{testCaseName:t,productId:this.options.productId,groupingName:void 0===this.options.groupingName?null:this.options.groupingName,providerSessionId:void 0===e?null:e})}finally{this.callsInFlight-=1}}async submitTestResult(t,e,i){this.callsInFlight+=1;try{const s={testResultId:t,status:e,failureReason:i};await this.client.post("/api/v1.0/test-result/submit-ps-result",s)}finally{this.callsInFlight-=1}}},t._validateCtorParams=l,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=index.min.js.map
